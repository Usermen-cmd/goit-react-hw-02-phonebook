{"version":3,"sources":["Components/Phonebook/ContactForm/InputName.jsx","Components/Phonebook/ContactForm/InputTel.jsx","styles/Form.js","Components/Phonebook/ContactForm/ContactForm.jsx","styles/Find.js","Components/Phonebook/Filter/Filter.jsx","styles/List.js","Components/Phonebook/ContactList/ContactList.jsx","styles/Container.js","styles/HeaderPrimary.js","styles/SecondaryHeader.js","Components/Phonebook/Phonebook.jsx","App.jsx","index.js"],"names":["InputName","title","handler","value","type","name","pattern","required","onChange","placeholder","defaultProps","InputTel","Form","ContactForm","state","number","onChangeInput","event","label","target","setState","onSubmitClick","preventDefault","setContactList","props","pervState","this","onSubmit","Component","Find","Filter","onFilterChange","buttonTitle","onSortClick","onClick","propTyps","PropTyps","func","isRequired","List","ContactList","contacts","optionList","onDelClick","length","map","el","id","Container","HeaderPrimary","SecondaryHeader","Phonebook","filter","toggleSort","isNameUnique","find","newContact","prevState","uuidv4","alert","normalizeValue","toLowerCase","trim","getfiltredContacts","includes","setEntryContactList","filtredContacts","idContact","dataset","remainderContacts","sortByName","arraySort","reverse","entryContactList","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.901db6c7.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst InputName = ({ title, handler, value }) => {\r\n  return (\r\n    <input\r\n      type=\"text\"\r\n      name=\"name\"\r\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n      title={title}\r\n      required\r\n      onChange={handler}\r\n      value={value}\r\n      placeholder=\"Enter Name\"\r\n    />\r\n  );\r\n};\r\n\r\nInputName.defaultProps = {\r\n  title:\r\n    \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n};\r\n\r\nInputName.propTypes = {\r\n  title: PropTypes.string,\r\n  handler: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default InputName;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst InputTel = ({ title, handler, value }) => {\r\n  return (\r\n    <input\r\n      type=\"tel\"\r\n      name=\"number\"\r\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n      title={title}\r\n      required\r\n      onChange={handler}\r\n      value={value}\r\n      placeholder=\"Enter Phone\"\r\n    />\r\n  );\r\n};\r\n\r\nInputTel.defaultProps = {\r\n  title:\r\n    'Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +',\r\n};\r\n\r\nInputTel.propTypes = {\r\n  title: PropTypes.string,\r\n  handler: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default InputTel;\r\n","import styled from '@emotion/styled/macro';\n\nexport const Form = styled.form`\n  padding: 5px;\n  margin: 0 auto;\n  margin-bottom: 10px;\n  @media (min-width: 768px) {\n    display: grid;\n    grid-template-columns: 1fr 1fr 0.7fr;\n    width: 500px;\n    gap: 10px;\n  }\n  input {\n    padding: 5px 5px;\n    box-sizing: border-box;\n    border-radius: 4px;\n    border: 1px solid;\n    border-color: #69c2be;\n    display: block;\n    width: 100%;\n    margin-bottom: 3px;\n    &::placeholder {\n      color: #999;\n    }\n    &:focus {\n      box-shadow: 0 0 2pt 1pt #69c2be;\n      outline: none;\n    }\n    @media (min-width: 768px) {\n      display: block;\n      padding: 2px 5px;\n      margin-bottom: 0;\n    }\n  }\n  button {\n    padding: 10px 0;\n    margin-top: 15px;\n    border-radius: 6px;\n    border: none;\n    display: block;\n    width: 100%;\n    color: #fff;\n    background-color: #69c2be;\n    font-weight: 600;\n    transition: all 200ms linear;\n    &:hover {\n      transform: scale(1.1);\n      box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\n      cursor: pointer;\n    }\n    @media (min-width: 768px) {\n      margin-top: 0;\n    }\n  }\n`;\n","import { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n//Components\r\nimport InputName from './InputName';\r\nimport InputTel from './InputTel';\r\n//Styles\r\nimport { Form } from 'styles/Form';\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    setContactList: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  onChangeInput = event => {\r\n    const label = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({ [label]: value });\r\n  };\r\n\r\n  onSubmitClick = event => {\r\n    event.preventDefault();\r\n    const { setContactList } = this.props;\r\n    this.setState(pervState => {\r\n      setContactList(pervState);\r\n      return { name: '', number: '' };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <Form onSubmit={this.onSubmitClick}>\r\n        <InputName handler={this.onChangeInput} value={name} />\r\n        <InputTel handler={this.onChangeInput} value={number} />\r\n        <button type=\"submit\">Add Contact</button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import styled from '@emotion/styled/macro';\n\nexport const Find = styled.div`\n  div {\n    box-sizing: content-box;\n    padding: 3px 0;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    margin: 0 auto;\n    margin-bottom: 20px;\n    max-width: 500px;\n  }\n\n  h4 {\n    text-align: center;\n    color: #353b3a;\n    margin-bottom: 10px;\n    font-weight: 900;\n  }\n  input {\n    padding: 10px 5px;\n    box-sizing: content-box;\n    border-radius: 4px;\n    border: 1px solid;\n    border-color: #69c2be;\n    display: block;\n    width: 150px;\n    &:focus {\n      box-shadow: 0 0 2pt 1pt #69c2be;\n      outline: none;\n    }\n    &::placeholder {\n      color: #999;\n    }\n  }\n  button {\n    padding: 10px 10px;\n    border-radius: 6px;\n    border: none;\n    display: block;\n    color: #fff;\n    background-color: #69c2be;\n    font-weight: 600;\n    transition: all 200ms linear;\n    &:hover {\n      transform: scale(1.1);\n      box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\n      cursor: pointer;\n    }\n  }\n`;\n","import PropTyps from 'prop-types';\r\n\r\nimport { Find } from 'styles/Find';\r\n\r\nconst Filter = ({ onFilterChange, buttonTitle, onSortClick }) => {\r\n  return (\r\n    <Find>\r\n      <h4>Find contact by name</h4>\r\n      <div>\r\n        <input type=\"text\" onChange={onFilterChange} placeholder=\"Enter Name\" />\r\n        <button type=\"button\" onClick={onSortClick}>\r\n          Sort by {buttonTitle}\r\n        </button>\r\n      </div>\r\n    </Find>\r\n  );\r\n};\r\n\r\nFilter.propTyps = {\r\n  onFilterChange: PropTyps.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import styled from '@emotion/styled/macro';\n\nexport const List = styled.ul`\n  margin: 0 auto;\n  max-width: 500px;\n  color: #353b3a;\n  li {\n    margin-bottom: 10px;\n    padding: 5px 20px;\n    border-radius: 5px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    @media (max-width: 768px) {\n      flex-direction: column;\n    }\n    &:hover span {\n      transition: all 200ms linear;\n      transform: scale(1.02);\n    }\n  }\n  button {\n    padding: 3px 10px;\n    border-radius: 6px;\n    border: none;\n    color: #fff;\n    background-color: #69c2be;\n    font-weight: 600;\n    transition: all 200ms linear;\n    &:hover {\n      transform: scale(1.1);\n      box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\n      cursor: pointer;\n    }\n    @media (max-width: 768px) {\n      margin-top: 5px;\n    }\n  }\n`;\n","import PropTypes from 'prop-types';\r\n//Styles\r\nimport { List } from 'styles/List';\r\n\r\nconst ContactList = ({ contacts, optionList, onDelClick }) => {\r\n  return (\r\n    <>\r\n      {contacts.length ? (\r\n        <List>\r\n          {contacts.map(el => {\r\n            return (\r\n              <li key={el.id}>\r\n                <span>\r\n                  {el.name} : {el.number}\r\n                </span>\r\n                <button type=\"button\" onClick={onDelClick} data-id={el.id}>\r\n                  delete\r\n                </button>\r\n              </li>\r\n            );\r\n          })}\r\n        </List>\r\n      ) : (\r\n        <p>{optionList}</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nContactList.defaultProps = {\r\n  optionList: 'Контактов нет',\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  onDelClick: PropTypes.func.isRequired,\r\n  optionList: PropTypes.string,\r\n};\r\n\r\nexport default ContactList;\r\n","import styled from '@emotion/styled/macro';\n\nexport const Container = styled.div`\n  box-sizing: border-box;\n  padding: 20px 30px;\n  background-color: #c1d9d8;\n  max-width: 320px;\n  margin: 0 auto;\n  @media (min-width: 768px) {\n    max-width: 600px;\n  }\n  @media (min-width: 1024px) {\n    max-width: 1000px;\n  }\n  p {\n    text-align: center;\n    color: #353b3a;\n    font-weight: 500;\n  }\n`;\n","import styled from '@emotion/styled/macro';\n\nexport const HeaderPrimary = styled.h1`\n  text-align: center;\n  color: #353b3a;\n  margin-bottom: 10px;\n  font-weight: 900;\n  @media (min-width: 768px) {\n    margin-bottom: 20px;\n  }\n  @media (min-width: 1024px) {\n    margin-bottom: 30px;\n  }\n`;\n","import styled from '@emotion/styled/macro';\n\nexport const SecondaryHeader = styled.h2`\n  text-align: center;\n  margin-bottom: 10px;\n  font-weight: 900;\n  color: #353b3a;\n`;\n","import { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n//Components\r\nimport ContactForm from 'Components/Phonebook/ContactForm/ContactForm';\r\nimport Filter from 'Components/Phonebook/Filter/Filter';\r\nimport ContactList from 'Components/Phonebook/ContactList/ContactList';\r\n//Utils\r\nimport arraySort from 'array-sort';\r\n//Styles\r\nimport { Container } from 'styles/Container';\r\nimport { HeaderPrimary } from 'styles/HeaderPrimary';\r\nimport { SecondaryHeader } from 'styles/SecondaryHeader';\r\n\r\nclass Phonebook extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n    toggleSort: false,\r\n  };\r\n\r\n  isNameUnique = (name, contacts) => {\r\n    const hasName = contacts.find(el => el.name === name);\r\n    return hasName ? false : true;\r\n  };\r\n\r\n  setContactList = newContact => {\r\n    this.setState(prevState => {\r\n      const isUnique = this.isNameUnique(newContact.name, prevState.contacts);\r\n\r\n      if (isUnique) {\r\n        return {\r\n          contacts: [...prevState.contacts, { ...newContact, id: uuidv4() }],\r\n        };\r\n      }\r\n\r\n      alert(`имя ${newContact.name} есть в списке контактов`);\r\n    });\r\n  };\r\n\r\n  onFilterChange = event => {\r\n    const normalizeValue = event.target.value.toLowerCase().trim();\r\n    this.setState({ filter: normalizeValue });\r\n  };\r\n\r\n  getfiltredContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    const filtredContacts = contacts.filter(el =>\r\n      el.name.toLowerCase().includes(filter),\r\n    );\r\n    return filtredContacts;\r\n  };\r\n\r\n  setEntryContactList = filtredContacts => {\r\n    const { contacts } = this.state;\r\n    if (filtredContacts.length === 0 && contacts.length === 0) {\r\n      return 'Вы не добавили ни одного контакта';\r\n    }\r\n    return 'Такого контакта в списке не найдено';\r\n  };\r\n\r\n  onDelClick = event => {\r\n    const idContact = event.target.dataset.id;\r\n    this.setState(({ contacts }) => {\r\n      const remainderContacts = contacts.filter(el => el.id !== idContact);\r\n      return { contacts: [...remainderContacts] };\r\n    });\r\n  };\r\n\r\n  onSortClick = () => {\r\n    this.setState(prevState => {\r\n      const sortByName = arraySort(prevState.contacts, 'name', {\r\n        reverse: prevState.toggleSort,\r\n      });\r\n      return {\r\n        contacts: [...sortByName],\r\n        toggleSort: !prevState.toggleSort,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filtredContacts = this.getfiltredContacts();\r\n    const entryContactList = this.setEntryContactList(filtredContacts);\r\n    return (\r\n      <Container>\r\n        <HeaderPrimary>Phonebook</HeaderPrimary>\r\n        <ContactForm setContactList={this.setContactList} />\r\n        <SecondaryHeader>Contacts</SecondaryHeader>\r\n        <Filter\r\n          onFilterChange={this.onFilterChange}\r\n          buttonTitle={this.state.toggleSort ? 'Z-A' : 'A-Z'}\r\n          onSortClick={this.onSortClick}\r\n        />\r\n        <ContactList\r\n          contacts={filtredContacts}\r\n          optionList={entryContactList}\r\n          onDelClick={this.onDelClick}\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Phonebook;\r\n","import Phonebook from 'Components/Phonebook/Phonebook';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Phonebook />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}