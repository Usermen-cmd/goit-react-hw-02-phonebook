{"version":3,"sources":["Components/Phonebook/ContactForm/ContactForm.jsx","Components/Phonebook/Filter/Filter.jsx","Components/Phonebook/ContactList/ContactList.jsx","Components/Phonebook/Phonebook.jsx","App.jsx","index.js"],"names":["ContactForm","state","name","number","onChangeInput","event","label","target","value","setState","onSubmitClick","preventDefault","setContactList","props","pervState","this","onSubmit","type","pattern","title","required","onChange","require","Component","Filter","onFilterChange","ContactList","contacts","optionList","onDelClick","length","map","el","onClick","id","Phonebook","filter","isNameUnique","find","newContact","prevState","uuidv4","alert","normalizeValue","toLowerCase","trim","getfiltredContacts","includes","setEntryContactList","filtredContacts","idContact","dataset","remainderContacts","entryContactList","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.171a71b6.chunk.js","sourcesContent":["const { Component } = require('react');\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  onChangeInput = event => {\r\n    const label = event.target.name;\r\n    const value = event.target.value;\r\n    this.setState({ [label]: value });\r\n  };\r\n\r\n  onSubmitClick = event => {\r\n    event.preventDefault();\r\n    const { setContactList } = this.props;\r\n    this.setState(pervState => {\r\n      setContactList(pervState);\r\n      return { name: '', number: '' };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <form onSubmit={this.onSubmitClick}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.onChangeInput}\r\n            value={name}\r\n          />\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.onChangeInput}\r\n            value={number}\r\n          />\r\n          <button type=\"submit\">Add Contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default ContactForm;\r\n","const Filter = ({ onFilterChange }) => {\r\n  return (\r\n    <>\r\n      <input type=\"text\" onChange={onFilterChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","const ContactList = ({ contacts, optionList, onDelClick }) => {\r\n  return (\r\n    <>\r\n      {contacts.length ? (\r\n        <ul>\r\n          {contacts.map(el => {\r\n            return (\r\n              <li key={el.id}>\r\n                <span>\r\n                  {el.name} : {el.number}\r\n                </span>\r\n                <button type=\"button\" onClick={onDelClick} data-id={el.id}>\r\n                  delete\r\n                </button>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      ) : (\r\n        <p>{optionList}</p>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport ContactForm from 'Components/Phonebook/ContactForm/ContactForm';\r\nimport Filter from 'Components/Phonebook/Filter/Filter';\r\nimport ContactList from 'Components/Phonebook/ContactList/ContactList';\r\n\r\nclass Phonebook extends Component {\r\n  state = {\r\n    contacts: [\r\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n    ],\r\n    filter: '',\r\n  };\r\n\r\n  isNameUnique = (name, contacts) => {\r\n    const hasName = contacts.find(el => el.name === name);\r\n    return hasName ? false : true;\r\n  };\r\n\r\n  setContactList = newContact => {\r\n    this.setState(prevState => {\r\n      const isUnique = this.isNameUnique(newContact.name, prevState.contacts);\r\n\r\n      if (isUnique) {\r\n        return {\r\n          contacts: [...prevState.contacts, { ...newContact, id: uuidv4() }],\r\n        };\r\n      }\r\n\r\n      alert(`имя ${newContact.name} есть в списке контактов`);\r\n    });\r\n  };\r\n\r\n  onFilterChange = event => {\r\n    const normalizeValue = event.target.value.toLowerCase().trim();\r\n    this.setState({ filter: normalizeValue });\r\n  };\r\n\r\n  getfiltredContacts = () => {\r\n    const { contacts, filter } = this.state;\r\n    const filtredContacts = contacts.filter(el =>\r\n      el.name.toLowerCase().includes(filter),\r\n    );\r\n    return filtredContacts;\r\n  };\r\n\r\n  setEntryContactList = filtredContacts => {\r\n    const { contacts } = this.state;\r\n    if (filtredContacts.length === 0 && contacts.length === 0) {\r\n      return 'Вы не добавили ни одного контакта';\r\n    }\r\n    return 'Такого контакта в списке не найдено';\r\n  };\r\n\r\n  onDelClick = event => {\r\n    const idContact = event.target.dataset.id;\r\n    this.setState(({ contacts }) => {\r\n      const remainderContacts = contacts.filter(el => el.id !== idContact);\r\n      return { contacts: [...remainderContacts] };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filtredContacts = this.getfiltredContacts();\r\n    const entryContactList = this.setEntryContactList(filtredContacts);\r\n    return (\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm setContactList={this.setContactList} />\r\n        <h2>Contacts</h2>\r\n        <Filter onFilterChange={this.onFilterChange} />\r\n        <ContactList\r\n          contacts={filtredContacts}\r\n          optionList={entryContactList}\r\n          onDelClick={this.onDelClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Phonebook;\r\n","import Phonebook from 'Components/Phonebook/Phonebook';\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Phonebook />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}